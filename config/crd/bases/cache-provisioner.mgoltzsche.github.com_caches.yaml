apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: caches.cache-provisioner.mgoltzsche.github.com
spec:
  group: cache-provisioner.mgoltzsche.github.com
  names:
    kind: Cache
    listKind: CacheList
    plural: caches
    singular: cache
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Cache is the Schema for the caches API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: CacheSpec defines the desired state of Cache
            properties:
              readOnly:
                description: BaseCacheName string `json:"baseCacheName,omitempty"`
                type: boolean
            type: object
          status:
            description: CacheStatus defines the observed state of Cache
            properties:
              cacheGeneration:
                format: int64
                type: integer
              conditions:
                description: Conditions represent the latest available observations
                  of a Cache's current state.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{     // Represents the observations of a
                    foo's current state.     // Known .status.conditions.type are:
                    \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                    \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                    \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                    \n     // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              image:
                type: string
              lastImageID:
                type: string
              lastReset:
                properties:
                  cacheGeneration:
                    format: int64
                    type: integer
                  resetTime:
                    format: date-time
                    type: string
                required:
                - cacheGeneration
                - resetTime
                type: object
              lastUsed:
                format: date-time
                type: string
              lastWritten:
                format: date-time
                type: string
              nodes:
                description: LastWrittenByPersistentVolumeClaim string       `json:"lastWrittenByPersistentVolumeClaim,omitempty"`
                items:
                  description: NodeStatus defines the observed state of a cache on
                    a node
                  properties:
                    cacheGeneration:
                      format: int64
                      type: integer
                    lastError:
                      properties:
                        cacheGeneration:
                          format: int64
                          type: integer
                        error:
                          type: string
                        happened:
                          format: date-time
                          type: string
                        volumeName:
                          type: string
                      required:
                      - error
                      - happened
                      - volumeName
                      type: object
                    lastImageID:
                      type: string
                    lastUsed:
                      format: date-time
                      type: string
                    name:
                      type: string
                    volumes:
                      items:
                        description: VolumeStatus defines the observed state of a
                          volume or rather cache mount/umount/commit lifecycle
                        properties:
                          cacheGeneration:
                            format: int64
                            type: integer
                          commitStartTime:
                            format: date-time
                            type: string
                          committable:
                            type: boolean
                          created:
                            format: date-time
                            type: string
                          name:
                            type: string
                        required:
                        - cacheGeneration
                        - created
                        - name
                        type: object
                      type: array
                  required:
                  - lastUsed
                  - name
                  type: object
                type: array
              phase:
                type: string
              used:
                format: int64
                type: integer
            required:
            - used
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
